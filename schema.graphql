type Customer {
  id: ID!
  spots: [Spot]!
}

type Manager {
  id: ID!
  que: Que
}

type Mutation {
  callSpot: Spot
  createCustomer: Customer
  createQue(name: String!): Que
  createSpot(queId: ID): Spot
  leaveSpot(spotId: ID): Spot
  serveSpot(queId: ID): Spot
  signInMannager: SigninPayload
}

type Que {
  id: ID!
  length: Int!
  name: String!
  next: Spot
  spots: [Spot]!
}

type Query {
  allCustomers: [Customer]!
  allManagers: [Manager]!
  allQues: [Que]!
  allSpots: [Spot]!
  que(id: ID): Que
  spot(id: ID): Spot
}

type SigninPayload {
  manager: Manager
  token: String
}

type Spot {
  called: Boolean
  customer: Customer
  id: ID
  position(spot_id: ID, que_id: ID): Int!
  que: Que
  served: Boolean
}